// Code generated by internal/gen. DO NOT EDIT.

//go:build {{if not .RangeFunc}}!{{end}}rangefunc

package xiter

import (
	"cmp"
	"context"
	"reflect"
	{{if .RangeFunc}}"iter"{{end}}
	"deedles.dev/xiter/internal/xslices"
)

{{range $func := .Funcs}}
	func {{.Name | convertFuncName}}{{with .Type.TypeParams | typeParamSlice}}[
		{{- range .}}
			{{- .}} {{.Constraint | convertType $.RangeFunc}},
		{{- end -}}
	]{{end}}(
		{{- range .Type.Params | tupleSlice}}
			{{- .Name}} {{.Type | convertType $.RangeFunc}},
		{{- end -}}
	) (
		{{- range .Type.Results | tupleSlice}}
			{{- .Name}} {{.Type | convertType $.RangeFunc}},
		{{- end -}}
	) {
		{{with .Type.Results}}{{range $i, $_ := . | tupleSlice}}{{if ne $i 0}},{{end}}_r{{$i}}{{end}} := {{end}}{{.Name}}(
			{{- range $i, $p := .Type.Params | tupleSlice}}
				{{- .Name | convertArg $.RangeFunc $p.Type }}{{if $func.Type.Variadic}}...{{end}},
			{{- end -}}
		)
		{{with .Type.Results}}return {{range $i, $r := . | tupleSlice}}{{if ne $i 0}},{{end}}{{printf "_r%v" $i | convertReturn $.RangeFunc $r.Type}}{{end}}{{end}}
	}
{{end}}
